# ==============================================================================
# Docker Compose - Food Orders CRM Full Stack
# Incluye: Next.js App, PostgreSQL, Redis, Nginx, Monitoring
# ==============================================================================

version: '3.8'

services:
  # ==============================================================================
  # PostgreSQL Database
  # ==============================================================================
  db:
    image: postgres:16-alpine
    container_name: crm-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-crmuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-crmpassword}
      POSTGRES_DB: ${POSTGRES_DB:-food_orders_crm}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-crmuser}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - crm-network

  # ==============================================================================
  # Redis Cache
  # ==============================================================================
  redis:
    image: redis:7-alpine
    container_name: crm-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - crm-network

  # ==============================================================================
  # Next.js Application
  # ==============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
        DATABASE_URL: ${DATABASE_URL}
        DIRECT_URL: ${DIRECT_URL}
    container_name: crm-app
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-crmuser}:${POSTGRES_PASSWORD:-crmpassword}@db:5432/${POSTGRES_DB:-food_orders_crm}
      DIRECT_URL: postgresql://${POSTGRES_USER:-crmuser}:${POSTGRES_PASSWORD:-crmpassword}@db:5432/${POSTGRES_DB:-food_orders_crm}
      
      # Clerk Auth
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redispassword}@redis:6379
      
      # App Config
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
      PORT: 3000
    ports:
      - "${APP_PORT:-3000}:3000"
    networks:
      - crm-network
    volumes:
      - app_uploads:/app/public/uploads

  # ==============================================================================
  # Nginx Reverse Proxy (Optional - for production)
  # ==============================================================================
  nginx:
    image: nginx:alpine
    container_name: crm-nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - crm-network
    profiles:
      - production

  # ==============================================================================
  # Adminer - Database Management UI (Development only)
  # ==============================================================================
  adminer:
    image: adminer:latest
    container_name: crm-adminer
    restart: unless-stopped
    depends_on:
      - db
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
    networks:
      - crm-network
    profiles:
      - development

# ==============================================================================
# Networks
# ==============================================================================
networks:
  crm-network:
    driver: bridge
    name: crm-network

# ==============================================================================
# Volumes
# ==============================================================================
volumes:
  postgres_data:
    name: crm-postgres-data
  redis_data:
    name: crm-redis-data
  app_uploads:
    name: crm-app-uploads
  nginx_logs:
    name: crm-nginx-logs
