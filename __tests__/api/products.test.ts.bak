import { GET, POST } from '@/app/api/products/route'
import { NextRequest } from 'next/server'

// Mock de la base de datos
jest.mock('@/lib/db', () => ({
  __esModule: true,
  default: {
    getProducts: jest.fn(),
    createProduct: jest.fn(),
  },
}))

import db from '@/lib/db'

const mockDb = db as jest.Mocked<typeof db>

describe('/api/products API Route Tests', () => {
  beforeEach(() => {
    jest.clearAllMocks()
  })

  describe('GET /api/products', () => {
    test('should return all products successfully', async () => {
      const mockProducts = [
        {
          id: 'prod-1',
          name: 'Tomatoes',
          description: 'Fresh tomatoes',
          unit: 'case',
          price: 25.99,
          stock: 100,
          sellerIds: ['user-seller-1']
        },
        {
          id: 'prod-2',
          name: 'Mozzarella',
          description: 'Italian mozzarella',
          unit: 'pk',
          price: 15.50,
          stock: 50,
          sellerIds: ['user-seller-1']
        }
      ]

      mockDb.getProducts.mockReturnValue(mockProducts)

      const response = await GET()
      const data = await response.json()

      expect(response.status).toBe(200)
      expect(data).toEqual(mockProducts)
      expect(mockDb.getProducts).toHaveBeenCalledTimes(1)
    })

    test('should handle database error', async () => {
      mockDb.getProducts.mockImplementation(() => {
        throw new Error('Database error')
      })

      const response = await GET()
      const data = await response.json()

      expect(response.status).toBe(500)
      expect(data).toEqual({ error: 'Error al obtener productos' })
    })
  })

  describe('POST /api/products', () => {
    test('should create a new product successfully', async () => {
      const newProductData = {
        name: 'New Product',
        description: 'A new test product',
        unit: 'case',
        price: '30.99',
        stock: '75'
      }

      const expectedProduct = {
        id: 'prod-new',
        name: 'New Product',
        description: 'A new test product',
        unit: 'case',
        price: 30.99,
        stock: 75,
        sellerIds: []
      }

      mockDb.createProduct.mockReturnValue(expectedProduct)

      const request = new NextRequest('http://localhost:3000/api/products', {
        method: 'POST',
        body: JSON.stringify(newProductData),
        headers: {
          'Content-Type': 'application/json',
        },
      })

      const response = await POST(request)
      const data = await response.json()

      expect(response.status).toBe(201)
      expect(data).toEqual(expectedProduct)
      expect(mockDb.createProduct).toHaveBeenCalledWith({
        name: 'New Product',
        description: 'A new test product',
        unit: 'case',
        price: 30.99,
        stock: 75,
        sellerIds: []
      })
    })

    test('should return 400 for missing required fields', async () => {
      const incompleteData = {
        name: 'Incomplete Product',
        // missing required fields
      }

      const request = new NextRequest('http://localhost:3000/api/products', {
        method: 'POST',
        body: JSON.stringify(incompleteData),
        headers: {
          'Content-Type': 'application/json',
        },
      })

      const response = await POST(request)
      const data = await response.json()

      expect(response.status).toBe(400)
      expect(data).toEqual({ error: 'Campos requeridos faltantes' })
      expect(mockDb.createProduct).not.toHaveBeenCalled()
    })

    test('should handle database creation error', async () => {
      const productData = {
        name: 'Test Product',
        description: 'Test description',
        unit: 'case',
        price: '25.99',
        stock: '100'
      }

      mockDb.createProduct.mockImplementation(() => {
        throw new Error('Database creation error')
      })

      const request = new NextRequest('http://localhost:3000/api/products', {
        method: 'POST',
        body: JSON.stringify(productData),
        headers: {
          'Content-Type': 'application/json',
        },
      })

      const response = await POST(request)
      const data = await response.json()

      expect(response.status).toBe(500)
      expect(data).toEqual({ error: 'Error al crear producto' })
    })

    test('should convert string numbers to proper types', async () => {
      const productData = {
        name: 'Type Conversion Test',
        description: 'Testing number conversion',
        unit: 'pk',
        price: '99.99',
        stock: '200',
        sellerIds: ['seller-1']
      }

      const expectedProduct = {
        id: 'prod-test',
        name: 'Type Conversion Test',
        description: 'Testing number conversion',
        unit: 'pk',
        price: 99.99,
        stock: 200,
        sellerIds: ['seller-1']
      }

      mockDb.createProduct.mockReturnValue(expectedProduct)

      const request = new NextRequest('http://localhost:3000/api/products', {
        method: 'POST',
        body: JSON.stringify(productData),
        headers: {
          'Content-Type': 'application/json',
        },
      })

      await POST(request)

      expect(mockDb.createProduct).toHaveBeenCalledWith({
        name: 'Type Conversion Test',
        description: 'Testing number conversion',
        unit: 'pk',
        price: 99.99,  // Should be converted to number
        stock: 200,    // Should be converted to number
        sellerIds: ['seller-1']
      })
    })
  })
})