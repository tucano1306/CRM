generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id                       String                  @id @default(uuid())
  name                     String
  businessName             String?
  address                  String
  phone                    String
  email                    String
  orderConfirmationMethod  OrderConfirmationMethod @default(MANUAL) // ⬅️ NUEVA LÍNEA
  orderConfirmationEnabled Boolean                 @default(true)
  notificationsEnabled     Boolean                 @default(true)
  sellerId                 String?
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  seller                   Seller?                 @relation(fields: [sellerId], references: [id])
  orders                   Order[]
  pending_orders           pending_orders[]
  authenticated_users      authenticated_users[]   @relation("ClientUsers")

  @@index([email])
  @@index([sellerId])
  @@map("clients")
}


model Seller {
  id                  String                @id @default(uuid())
  name                String
  email               String                @unique
  phone               String?
  isActive            Boolean               @default(true)
  territory           String?
  commission          Float?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  
  chat_messages       ChatMessage[]
  chatSchedules       ChatSchedule[]
  clients             Client[]
  orderSchedules      OrderSchedule[]
  orders              Order[]
  products            ProductSeller[]
  schedules           schedules[]
  authenticated_users authenticated_users[] @relation("SellerUsers")

  @@index([email])
  @@index([isActive])
  @@map("sellers")
}



model Product {
  id          String          @id @default(uuid())
  name        String
  description String?
  unit        ProductUnit     @default(case)
  price       Float           @default(0)
  stock       Int             @default(0)
  sku         String?         @unique
  imageUrl    String?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
  sellers     ProductSeller[]

  @@index([name])
  @@index([unit])
  @@index([isActive])
  @@map("products")
}

model ProductSeller {
  id          String   @id @default(uuid())
  productId   String
  sellerId    String
  sellerPrice Float?
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  seller      Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@unique([productId, sellerId])
  @@index([productId])
  @@index([sellerId])
  @@map("product_sellers")
}

model Order {
  id                      String              @id @default(uuid())
  orderNumber             String              @unique
  status                  OrderStatus         @default(PENDING)
  totalAmount             Decimal             @default(0) @db.Decimal(10, 2)
  notes                   String?
  confirmedAt             DateTime?
  canceledAt              DateTime?
  completedAt             DateTime?
  
  // Campos nuevos para confirmación y mensajes
  confirmationDeadline    DateTime?
  idempotencyKey          String?             @unique
  generalMessage          String?

  // Relations
  clientId                String
  client                  Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  sellerId                String
  seller                  Seller              @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  
  orderItems              OrderItem[]
  chatMessages            ChatMessage[]
  orderStatusUpdates      OrderStatusUpdate[]

  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  @@index([clientId])
  @@index([sellerId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}


model OrderItem {
  id           String   @id @default(uuid())
  productName  String
  quantity     Int
  pricePerUnit Decimal  @db.Decimal(10, 2)
  subtotal     Decimal  @db.Decimal(10, 2)
  confirmed    Boolean  @default(false)
  
  // Campo nuevo
  itemNote     String?
  
  // Relations
  orderId      String
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId    String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}


model OrderSchedule {
  id        String    @id @default(uuid())
  sellerId  String
  dayOfWeek DayOfWeek
  startTime String    // Formato: "08:00"
  endTime   String    // Formato: "17:00"
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  seller    Seller    @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@unique([sellerId, dayOfWeek])
  @@index([sellerId])
  @@index([dayOfWeek])
  @@map("order_schedules")
}

model ChatSchedule {
  id        String    @id @default(uuid())
  sellerId  String
  dayOfWeek DayOfWeek
  startTime String    // Formato: "08:00"
  endTime   String    // Formato: "17:00"
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  seller    Seller    @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@unique([sellerId, dayOfWeek])
  @@index([sellerId])
  @@index([dayOfWeek])
  @@map("chat_schedules")
}

model ChatMessage {
  id                  String              @id @default(uuid())
  senderId            String              // Clerk User ID del que envía
  receiverId          String              // Clerk User ID del que recibe
  message             String
  isRead              Boolean             @default(false)
  messageType         String              @default("text")
  idempotencyKey      String?             @unique
  userId              String
  sellerId            String?
  orderId             String?
  createdAt           DateTime            @default(now())
  
  order               Order?              @relation(fields: [orderId], references: [id], onDelete: SetNull)
  sellers             Seller?             @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  authenticated_users authenticated_users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([orderId])
  @@index([createdAt])
  @@index([sellerId])
  @@index([userId])
  @@map("chat_messages")
}

model OrderStatusUpdate {
  id             String      @id @default(uuid())
  idempotencyKey String      @unique
  orderId        String
  oldStatus      OrderStatus
  newStatus      OrderStatus
  createdAt      DateTime    @default(now())
  order          Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([idempotencyKey])
  @@map("order_status_updates")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]

  @@index([userId])
  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
  @@map("cart_items")
}

model activity_logs {
  id          String   @id
  action      String
  entityType  String
  entityId    String?
  description String?
  metadata    Json?
  userId      String?
  createdAt   DateTime @default(now())

  @@index([createdAt])
  @@index([entityId])
  @@index([entityType])
}

model authenticated_users {
  id            String        @id
  authId        String        @unique
  email         String        @unique
  name          String
  role          UserRole      @default(CLIENT)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  chat_messages ChatMessage[]
  clients       Client[]      @relation("ClientUsers")
  sellers       Seller[]      @relation("SellerUsers")

  @@index([authId])
  @@index([email])
  @@index([role])
}

model pending_orders {
  id        String   @id
  status    String   @default("draft")
  notes     String?
  clientId  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  clients   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([status])
}

model schedules {
  id        String    @id
  dayOfWeek DayOfWeek
  timeSlot  TimeSlot

  isActive  Boolean  @default(true)
  notes     String?
  sellerId  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  sellers   Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@unique([sellerId, dayOfWeek, timeSlot])
  @@index([dayOfWeek])
  @@index([sellerId])
}

enum ProductUnit {
  case
  pk
  box
  unit
  kg
  lb
}

enum OrderStatus {
  PENDING
  PLACED
  CONFIRMED
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum OrderConfirmationMethod {
  MANUAL
  AUTOMATIC
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TimeSlot {
  MORNING
  AFTERNOON
  EVENING
  NIGHT
}

enum UserRole {
  ADMIN
  SELLER
  CLIENT
}
