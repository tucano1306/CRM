generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id                       String                  @id @default(uuid())
  name                     String
  businessName             String?
  address                  String
  zipCode                  String?
  phone                    String
  email                    String
  orderConfirmationMethod  OrderConfirmationMethod @default(MANUAL) // ⬅️ NUEVA LÍNEA
  orderConfirmationEnabled Boolean                 @default(true)
  notificationsEnabled     Boolean                 @default(true)
  sellerId                 String?
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  seller                   Seller?                 @relation(fields: [sellerId], references: [id])
  orders                   Order[]
  pending_orders           pending_orders[]
  authenticated_users      authenticated_users[]   @relation("ClientUsers")
  recurringOrders          RecurringOrder[]
  quotes                   Quote[]
  returns                  Return[]
  creditNotes              CreditNote[]
  notifications            Notification[]

  @@index([email])
  @@index([sellerId])
  @@map("clients")
}


model Seller {
  id                  String                @id @default(uuid())
  name                String
  email               String                @unique
  phone               String?
  isActive            Boolean               @default(true)
  territory           String?
  commission          Float?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  
  chat_messages       ChatMessage[]
  chatSchedules       ChatSchedule[]
  clients             Client[]
  orderSchedules      OrderSchedule[]
  orders              Order[]
  products            ProductSeller[]
  schedules           schedules[]
  authenticated_users authenticated_users[] @relation("SellerUsers")
  quotes              Quote[]
  returns             Return[]
  creditNotes         CreditNote[]
  notifications       Notification[]

  @@index([email])
  @@index([isActive])
  @@map("sellers")
}



model Product {
  id          String          @id @default(uuid())
  name        String
  description String?
  unit        ProductUnit     @default(case)
  category    ProductCategory @default(OTROS)
  price       Float           @default(0)
  stock       Int             @default(0)
  sku         String?         @unique
  imageUrl    String?
  isActive    Boolean         @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  cartItems           CartItem[]
  orderItems          OrderItem[]
  sellers             ProductSeller[]
  recurringOrderItems RecurringOrderItem[]
  quoteItems          QuoteItem[]
  returnItems         ReturnItem[]
  history             ProductHistory[]
  productTags         ProductTag[]
  variants            ProductVariant[]
  favorites           Favorite[]

  @@index([name])
  @@index([unit])
  @@index([category])
  @@index([isActive])
  @@map("products")
}

model ProductVariant {
  id          String   @id @default(uuid())
  productId   String
  size        String
  type        String
  price       Float
  stock       Int
  sku         String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([size])
  @@index([type])
  @@index([isActive])
  @@map("product_variants")
}

model ProductSeller {
  id          String   @id @default(uuid())
  productId   String
  sellerId    String
  sellerPrice Float?
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  seller      Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@unique([productId, sellerId])
  @@index([productId])
  @@index([sellerId])
  @@map("product_sellers")
}

model Order {
  id                      String              @id @default(uuid())
  orderNumber             String              @unique
  status                  OrderStatus         @default(PENDING)
  totalAmount             Decimal             @default(0) @db.Decimal(10, 2)
  notes                   String?
  confirmedAt             DateTime?
  canceledAt              DateTime?
  completedAt             DateTime?
  
  // Campos nuevos para confirmación y mensajes
  confirmationDeadline    DateTime?
  idempotencyKey          String?             @unique
  generalMessage          String?

  // Relations
  clientId                String
  client                  Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  sellerId                String
  seller                  Seller              @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  
  orderItems              OrderItem[]
  chatMessages            ChatMessage[]
  orderStatusUpdates      OrderStatusUpdate[]
  statusHistory           OrderStatusHistory[]
  recurringExecution      RecurringOrderExecution?
  convertedFromQuote      Quote?
  returns                 Return[]
  creditNoteUsages        CreditNoteUsage[]

  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  @@index([clientId])
  @@index([sellerId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}


model OrderItem {
  id           String   @id @default(uuid())
  productName  String
  quantity     Int
  pricePerUnit Decimal  @db.Decimal(10, 2)
  subtotal     Decimal  @db.Decimal(10, 2)
  confirmed    Boolean  @default(false)
  
  // Campo nuevo
  itemNote     String?
  
  // Relations
  orderId      String
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId    String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  returnItems  ReturnItem[]

  createdAt    DateTime @default(now())

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}


model OrderSchedule {
  id        String    @id @default(uuid())
  sellerId  String
  dayOfWeek DayOfWeek
  startTime String    // Formato: "08:00"
  endTime   String    // Formato: "17:00"
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  seller    Seller    @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@unique([sellerId, dayOfWeek])
  @@index([sellerId])
  @@index([dayOfWeek])
  @@map("order_schedules")
}

model Notification {
  id          String           @id @default(uuid())
  sellerId    String?          // Opcional - para notificaciones a vendedor
  clientId    String?          // Opcional - para notificaciones a comprador
  type        NotificationType
  title       String
  message     String
  isRead      Boolean          @default(false)
  orderId     String?
  relatedId   String?          // ID relacionado (cotización, devolución, etc.)
  metadata    Json?            // Datos adicionales flexibles
  createdAt   DateTime         @default(now())
  readAt      DateTime?

  seller      Seller?          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  client      Client?          @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([sellerId])
  @@index([clientId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

enum NotificationType {
  NEW_ORDER              // Comprador → Vendedor
  ORDER_MODIFIED         // Comprador → Vendedor
  ORDER_CANCELLED        // Comprador → Vendedor
  ORDER_STATUS_CHANGED   // Vendedor → Comprador
  ORDER_CONFIRMED        // Vendedor → Comprador
  ORDER_COMPLETED        // Vendedor → Comprador
  PAYMENT_RECEIVED       // Vendedor → Comprador
  CHAT_MESSAGE           // Bidireccional
  RETURN_REQUEST         // Comprador → Vendedor
  RETURN_APPROVED        // Vendedor → Comprador
  RETURN_REJECTED        // Vendedor → Comprador
  QUOTE_CREATED          // Vendedor → Comprador
  QUOTE_UPDATED          // Vendedor → Comprador
  QUOTE_SENT             // Vendedor → Comprador (cotización enviada)
  QUOTE_ACCEPTED         // Comprador → Vendedor (cotización aceptada)
  QUOTE_REJECTED         // Comprador → Vendedor (cotización rechazada)
  CREDIT_NOTE_ISSUED     // Vendedor → Comprador
  LOW_STOCK_ALERT        // Sistema → Vendedor
}

model ChatSchedule {
  id        String    @id @default(uuid())
  sellerId  String
  dayOfWeek DayOfWeek
  startTime String    // Formato: "08:00"
  endTime   String    // Formato: "17:00"
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  seller    Seller    @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@unique([sellerId, dayOfWeek])
  @@index([sellerId])
  @@index([dayOfWeek])
  @@map("chat_schedules")
}

model ChatMessage {
  id                  String              @id @default(uuid())
  senderId            String              // Clerk User ID del que envía
  receiverId          String              // Clerk User ID del que recibe
  message             String
  isRead              Boolean             @default(false)
  messageType         String              @default("text")
  idempotencyKey      String?             @unique
  userId              String
  sellerId            String?
  orderId             String?
  createdAt           DateTime            @default(now())
  
  order               Order?              @relation(fields: [orderId], references: [id], onDelete: SetNull)
  sellers             Seller?             @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  authenticated_users authenticated_users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([orderId])
  @@index([createdAt])
  @@index([sellerId])
  @@index([userId])
  @@map("chat_messages")
}

model OrderStatusUpdate {
  id             String      @id @default(uuid())
  idempotencyKey String      @unique
  orderId        String
  oldStatus      OrderStatus
  newStatus      OrderStatus
  createdAt      DateTime    @default(now())
  order          Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([idempotencyKey])
  @@map("order_status_updates")
}

model OrderStatusHistory {
  id             String       @id @default(uuid())
  orderId        String
  previousStatus OrderStatus?
  newStatus      OrderStatus
  changedBy      String
  changedByName  String
  changedByRole  String
  notes          String?
  createdAt      DateTime     @default(now())
  
  order          Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([changedBy])
  @@index([createdAt])
  @@index([newStatus])
  @@map("order_status_history")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]

  @@index([userId])
  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
  @@map("cart_items")
}

model activity_logs {
  id          String   @id
  action      String
  entityType  String
  entityId    String?
  description String?
  metadata    Json?
  userId      String?
  createdAt   DateTime @default(now())

  @@index([createdAt])
  @@index([entityId])
  @@index([entityType])
}

model authenticated_users {
  id            String        @id
  authId        String        @unique
  email         String        @unique
  name          String
  role          UserRole      @default(CLIENT)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  chat_messages ChatMessage[]
  clients       Client[]      @relation("ClientUsers")
  sellers       Seller[]      @relation("SellerUsers")
  favorites     Favorite[]
  savedCarts    SavedCart[]

  @@index([authId])
  @@index([email])
  @@index([role])
}

model pending_orders {
  id        String   @id
  status    String   @default("draft")
  notes     String?
  clientId  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  clients   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([status])
}

model schedules {
  id        String    @id
  dayOfWeek DayOfWeek
  timeSlot  TimeSlot

  isActive  Boolean  @default(true)
  notes     String?
  sellerId  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  sellers   Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@unique([sellerId, dayOfWeek, timeSlot])
  @@index([dayOfWeek])
  @@index([sellerId])
}

enum ProductCategory {
  CARNES
  EMBUTIDOS
  SALSAS
  LACTEOS
  GRANOS
  VEGETALES
  CONDIMENTOS
  BEBIDAS
  OTROS
}

enum ProductUnit {
  case
  pk
  box
  unit
  kg
  lb
}

enum OrderStatus {
  PENDING              // Pendiente (inicial)
  CONFIRMED            // Confirmada por el vendedor
  PREPARING            // Preparando el pedido
  READY_FOR_PICKUP     // Listo para recoger
  IN_DELIVERY          // En entrega
  DELIVERED            // Entregado
  PARTIALLY_DELIVERED  // Entrega parcial
  COMPLETED            // Completada (final exitoso)
  CANCELED             // Cancelada (final fallido)
  PAYMENT_PENDING      // Pago pendiente
  PAID                 // Pagado
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum OrderConfirmationMethod {
  MANUAL
  AUTOMATIC
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TimeSlot {
  MORNING
  AFTERNOON
  EVENING
  NIGHT
}

enum UserRole {
  ADMIN
  SELLER
  CLIENT
}

enum RecurringFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  CUSTOM
}

model RecurringOrder {
  id                   String              @id @default(uuid())
  clientId             String
  name                 String
  frequency            RecurringFrequency
  customDays           Int?
  dayOfWeek            Int?
  dayOfMonth           Int?
  startDate            DateTime            @default(now())
  endDate              DateTime?
  nextExecutionDate    DateTime
  lastExecutionDate    DateTime?
  notes                String?
  deliveryInstructions String?
  totalAmount          Float
  isActive             Boolean             @default(true)
  executionCount       Int                 @default(0)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  
  client               Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  items                RecurringOrderItem[]
  executions           RecurringOrderExecution[]

  @@index([clientId])
  @@index([nextExecutionDate])
  @@index([isActive])
  @@map("recurring_orders")
}

model RecurringOrderItem {
  id               String         @id @default(uuid())
  recurringOrderId String
  productId        String
  productName      String
  quantity         Int
  pricePerUnit     Float
  subtotal         Float
  notes            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  recurringOrder   RecurringOrder @relation(fields: [recurringOrderId], references: [id], onDelete: Cascade)
  product          Product        @relation(fields: [productId], references: [id])

  @@index([recurringOrderId])
  @@index([productId])
  @@map("recurring_order_items")
}

model RecurringOrderExecution {
  id               String         @id @default(uuid())
  recurringOrderId String
  orderId          String         @unique
  executedAt       DateTime       @default(now())
  status           String         @default("SUCCESS")
  errorMessage     String?
  createdAt        DateTime       @default(now())
  
  recurringOrder   RecurringOrder @relation(fields: [recurringOrderId], references: [id], onDelete: Cascade)
  order            Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([recurringOrderId])
  @@index([executedAt])
  @@map("recurring_order_executions")
}

// ============================================
// QUOTES SYSTEM MODELS
// ============================================

enum QuoteStatus {
  DRAFT
  SENT
  VIEWED
  ACCEPTED
  REJECTED
  EXPIRED
  CONVERTED
}

model Quote {
  id                  String       @id @default(uuid())
  quoteNumber         String       @unique @map("quote_number")
  sellerId            String       @map("seller_id")
  clientId            String       @map("client_id")
  title               String
  description         String?
  status              QuoteStatus  @default(DRAFT)
  subtotal            Float
  discount            Float        @default(0)
  tax                 Float
  totalAmount         Float        @map("total_amount")
  validUntil          DateTime     @map("valid_until")
  notes               String?
  termsAndConditions  String?      @map("terms_and_conditions")
  sentAt              DateTime?    @map("sent_at")
  convertedOrderId    String?      @unique @map("converted_order_id")
  createdAt           DateTime     @default(now()) @map("created_at")
  updatedAt           DateTime     @updatedAt @map("updated_at")
  
  seller              Seller       @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  client              Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  items               QuoteItem[]
  convertedOrder      Order?       @relation(fields: [convertedOrderId], references: [id], onDelete: SetNull)

  @@index([sellerId])
  @@index([clientId])
  @@index([status])
  @@index([quoteNumber])
  @@index([createdAt])
  @@index([validUntil])
  @@index([convertedOrderId])
  @@map("quotes")
}

model QuoteItem {
  id           String   @id @default(uuid())
  quoteId      String   @map("quote_id")
  productId    String   @map("product_id")
  productName  String   @map("product_name")
  description  String?
  quantity     Int
  pricePerUnit Float    @map("price_per_unit")
  discount     Float    @default(0)
  subtotal     Float
  notes        String?
  createdAt    DateTime @default(now()) @map("created_at")
  
  quote        Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  product      Product  @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@index([quoteId])
  @@index([productId])
  @@map("quote_items")
}

// ============================================
// RETURNS AND CREDIT NOTES SYSTEM
// ============================================

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum RefundType {
  REFUND
  CREDIT
  REPLACEMENT
}

enum ReturnReason {
  DAMAGED
  EXPIRED
  WRONG_PRODUCT
  QUALITY_ISSUE
  NOT_AS_DESCRIBED
  OTHER
  DAMAGED_PRODUCT
  INCORRECT_PRODUCT
  CUSTOMER_DISSATISFACTION
  PRICING_ERROR
  DUPLICATE_ORDER
  GOODWILL
  OVERCHARGE
  PROMOTION_ADJUSTMENT
  COMPENSATION
}

model Return {
  id                  String        @id @default(uuid())
  returnNumber        String        @unique @map("return_number")
  orderId             String        @map("order_id")
  clientId            String        @map("client_id")
  sellerId            String        @map("seller_id")
  status              ReturnStatus  @default(PENDING)
  reason              ReturnReason
  reasonDescription   String?       @map("reason_description")
  refundType          RefundType    @default(CREDIT) @map("refund_type")
  totalReturnAmount   Float         @default(0) @map("total_return_amount")
  restockFee          Float         @default(0) @map("restock_fee")
  finalRefundAmount   Float         @default(0) @map("final_refund_amount")
  approvedBy          String?       @map("approved_by")
  approvedAt          DateTime?     @map("approved_at")
  completedAt         DateTime?     @map("completed_at")
  notes               String?
  isManual            Boolean       @default(false) @map("is_manual")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")
  
  order               Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  client              Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  seller              Seller        @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  items               ReturnItem[]
  creditNote          CreditNote?

  @@index([orderId])
  @@index([clientId])
  @@index([sellerId])
  @@index([status])
  @@index([createdAt])
  @@map("returns")
}

model ReturnItem {
  id               String    @id @default(uuid())
  returnId         String    @map("return_id")
  orderItemId      String    @map("order_item_id")
  productId        String    @map("product_id")
  productName      String    @map("product_name")
  quantityReturned Int       @map("quantity_returned")
  pricePerUnit     Float     @map("price_per_unit")
  subtotal         Float
  restocked        Boolean   @default(false)
  restockedAt      DateTime? @map("restocked_at")
  notes            String?
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  
  return           Return    @relation(fields: [returnId], references: [id], onDelete: Cascade)
  orderItem        OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Restrict)
  product          Product   @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@index([returnId])
  @@index([orderItemId])
  @@index([productId])
  @@map("return_items")
}

model CreditNote {
  id               String            @id @default(uuid())
  creditNoteNumber String            @unique @map("credit_note_number")
  returnId         String            @unique @map("return_id")
  clientId         String            @map("client_id")
  sellerId         String            @map("seller_id")
  amount           Float
  balance          Float
  usedAmount       Float             @default(0) @map("used_amount")
  expiresAt        DateTime?         @map("expires_at")
  isActive         Boolean           @default(true) @map("is_active")
  notes            String?
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  
  return           Return            @relation(fields: [returnId], references: [id], onDelete: Cascade)
  client           Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  seller           Seller            @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  usage            CreditNoteUsage[]

  @@index([returnId])
  @@index([clientId])
  @@index([sellerId])
  @@index([isActive])
  @@map("credit_notes")
}

model CreditNoteUsage {
  id            String     @id @default(uuid())
  creditNoteId  String     @map("credit_note_id")
  orderId       String     @map("order_id")
  amountUsed    Float      @map("amount_used")
  usedAt        DateTime   @default(now()) @map("used_at")
  notes         String?
  
  creditNote    CreditNote @relation(fields: [creditNoteId], references: [id], onDelete: Cascade)
  order         Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([creditNoteId])
  @@index([orderId])
  @@map("credit_note_usage")
}

model ProductHistory {
  id          String   @id @default(uuid())
  productId   String   @map("product_id")
  changeType  String   @map("change_type") // 'PRICE', 'STOCK', 'NAME', 'DESCRIPTION', etc.
  oldValue    String?  @map("old_value")
  newValue    String?  @map("new_value")
  changedBy   String?  @map("changed_by") // userId or 'SYSTEM'
  changedAt   DateTime @default(now()) @map("changed_at")
  
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([changeType])
  @@index([changedAt])
  @@map("product_history")
}

model ProductTag {
  id        String   @id @default(uuid())
  label     String
  color     String?  @default("#6B7280") // Color por defecto (gray)
  productId String   @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")
  
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([label])
  @@map("product_tags")
}

// ========================================
// NUEVOS MODELOS PARA FUNCIONALIDADES
// ========================================

model Favorite {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")
  
  user      authenticated_users @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product             @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@map("favorites")
}

model Coupon {
  id              String   @id @default(uuid())
  code            String   @unique
  description     String?
  discountType    String   @default("PERCENTAGE") // PERCENTAGE o FIXED
  discountValue   Float    // Porcentaje (0.10 = 10%) o monto fijo
  minPurchase     Float?   @map("min_purchase") // Compra mínima requerida
  maxDiscount     Float?   @map("max_discount") // Descuento máximo (para porcentaje)
  usageLimit      Int?     @map("usage_limit") // Límite de usos total
  usageCount      Int      @default(0) @map("usage_count") // Veces usado
  isActive        Boolean  @default(true) @map("is_active")
  validFrom       DateTime @default(now()) @map("valid_from")
  validUntil      DateTime? @map("valid_until")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@index([code])
  @@index([isActive])
  @@index([validFrom])
  @@index([validUntil])
  @@map("coupons")
}

model SavedCart {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  name      String?  // Nombre opcional del carrito guardado
  items     Json     // Guardamos los items como JSON
  total     Float    // Total guardado
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  user      authenticated_users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("saved_carts")
}
