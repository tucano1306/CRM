// Crear nota de cr√©dito manualmente para devoluci√≥n aprobada
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function createCreditNote() {
  try {
    const returnNumber = 'RET-1761522175707T4UPEALRY'
    
    console.log(`\nüîç Buscando devoluci√≥n: ${returnNumber}\n`)
    
    const returnRecord = await prisma.return.findFirst({
      where: { returnNumber },
      include: {
        client: { select: { name: true } },
        creditNote: true
      }
    })
    
    if (!returnRecord) {
      console.log('‚ùå Devoluci√≥n no encontrada')
      return
    }
    
    if (returnRecord.creditNote) {
      console.log('‚ö†Ô∏è  Esta devoluci√≥n ya tiene una nota de cr√©dito:', returnRecord.creditNote.creditNoteNumber)
      return
    }
    
    if (returnRecord.refundType !== 'CREDIT') {
      console.log('‚ö†Ô∏è  Esta devoluci√≥n no es de tipo CREDIT, es:', returnRecord.refundType)
      return
    }
    
    console.log('üì¶ Devoluci√≥n encontrada:')
    console.log('  Cliente:', returnRecord.client?.name)
    console.log('  Monto:', returnRecord.finalRefundAmount)
    console.log('  Estado:', returnRecord.status)
    
    console.log('\nüí≥ Creando nota de cr√©dito...')
    
    const creditNoteNumber = `CN-${Date.now()}-${Math.random().toString(36).substring(2, 7).toUpperCase()}`
    
    const creditNote = await prisma.creditNote.create({
      data: {
        creditNoteNumber,
        returnId: returnRecord.id,
        clientId: returnRecord.clientId,
        sellerId: returnRecord.sellerId,
        amount: Number(returnRecord.finalRefundAmount),
        balance: Number(returnRecord.finalRefundAmount),
        usedAmount: 0,
        expiresAt: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1 a√±o
        isActive: true,
        notes: `Cr√©dito por devoluci√≥n ${returnRecord.returnNumber}`
      }
    })
    
    console.log('‚úÖ Nota de cr√©dito creada exitosamente!')
    console.log('  N√∫mero:', creditNote.creditNoteNumber)
    console.log('  Monto:', creditNote.amount)
    console.log('  Balance disponible:', creditNote.balance)
    console.log('  Expira:', creditNote.expiresAt)
    
    console.log('\nüîî Creando notificaci√≥n para el cliente...')
    
    await prisma.notification.create({
      data: {
        type: 'CREDIT_NOTE_ISSUED',
        title: 'üí≥ Cr√©dito a tu Favor',
        message: `Se ha emitido un cr√©dito de $${Number(returnRecord.finalRefundAmount).toFixed(2)} por tu devoluci√≥n ${returnRecord.returnNumber}. Puedes usarlo en tu pr√≥xima compra.`,
        clientId: returnRecord.clientId,
        relatedId: creditNote.id,
        orderId: returnRecord.orderId,
        isRead: false
      }
    })
    
    console.log('‚úÖ Notificaci√≥n creada exitosamente!')
    console.log('\nüéâ ¬°Proceso completado! El cliente ahora ver√° su cr√©dito disponible.')
    
  } catch (error) {
    console.error('‚ùå Error:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createCreditNote()
